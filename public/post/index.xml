<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
      <title>Posts on ig.nore.me </title>
      <generator uri="https://hugo.spf13.com">Hugo</generator>
    <link>http://localhost:1313/post/index.xml/</link>
    
    
    
    <updated>Mon, 25 Aug 2014 00:00:00 UTC</updated>
    
    <item>
      <title>The first babysteps with CloudFormation</title>
      <link>http://localhost:1313/2014/08/the-first-babysteps-with-cloudformation/</link>
      <pubDate>Mon, 25 Aug 2014 00:00:00 UTC</pubDate>
      
      <guid>http://localhost:1313/2014/08/the-first-babysteps-with-cloudformation/</guid>
      <description>

&lt;p&gt;When it comes to creating an infrastructure in AWS, &lt;a href=&#34;http://aws.amazon.com/cloudformation/&#34;&gt;CloudFormation&lt;/a&gt; is a great tool. You can use it to manage your entire infrastructure, from the initial setup to any updates and removing it all again.&lt;/p&gt;

&lt;p&gt;When you follow the link above you will find a marketing speech explanation of CloudFormation that somehow manages to obscure what it actually is while mentioning all of the key points. I&amp;rsquo;m not going to say that my explanation will be better for you, but at least it&amp;rsquo;s short and shows how I think of it.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;CloudFormation allows you to manage your AWS infrastructure by defining it in code.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;I&amp;rsquo;ll be writing several articles about CloudFormation, progressing to more and more interesting setups. This article will start with the basics; explaining how CloudFormation works and walking through setting up a simple infrastructure containing a couple of load balanced EC2 instances in their own VPC.&lt;/p&gt;

&lt;h1 id=&#34;toc_0&#34;&gt;Terminology&lt;/h1&gt;

&lt;p&gt;As we&amp;rsquo;ll be talking about CloudFormation a lot, let&amp;rsquo;s start with defining a couple of terms. This is not an exhaustive list, but these are the most important ones you should be familiar with.&lt;/p&gt;

&lt;h2 id=&#34;toc_1&#34;&gt;Template&lt;/h2&gt;

&lt;p&gt;A template is the JSON file that describes your setup. It can be big or small, and has to adhere to the AWSTemplateFormat you define. You define this for the initial setup, and then you can make changes to it for further updates.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-language-javascript&#34;&gt;{
   &amp;quot;AWSTemplateFormatVersion&amp;quot; : &amp;quot;2010-09-09&amp;quot;,
   &amp;quot;Description&amp;quot; : &amp;quot;An example template&amp;quot;,
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Note that the order in which you define items in your template doesn&amp;rsquo;t matter, so you can organise it any way you prefer. The AWS documentation has a section devoted to the &lt;a href=&#34;http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/template-anatomy.html&#34;&gt;template anatomy&lt;/a&gt;, which goes into far more detail.&lt;/p&gt;

&lt;h2 id=&#34;toc_2&#34;&gt;Stack&lt;/h2&gt;

&lt;p&gt;A stack is the implementation of your template. When you upload your stack to AWS it will turn that into the infrastructure you requested. This can range from a single EC2 instance to a complex system of hundreds of instances and using almost every AWS service.&lt;/p&gt;

&lt;h2 id=&#34;toc_3&#34;&gt;Resource&lt;/h2&gt;

&lt;p&gt;Resources are the various services you define in your template. This can be anything from an EC2 instance to a SQS queue, and for each resource you define a number of properties. You can find a complete list of resources and their properties in the &lt;a href=&#34;http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-template-resource-type-ref.html&#34;&gt;AWS Resource Types reference&lt;/a&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-language-javascript&#34;&gt;   &amp;quot;Resources&amp;quot; : {
      &amp;quot;IPAddress&amp;quot; : {
         &amp;quot;Type&amp;quot; : &amp;quot;AWS::EC2::EIP&amp;quot;,
         &amp;quot;Properties&amp;quot; : {
            &amp;quot;InstanceId&amp;quot; : {
               &amp;quot;Ref&amp;quot; : &amp;quot;Webserver&amp;quot;
            },
            &amp;quot;Domain&amp;quot; : &amp;quot;vpc&amp;quot;
         }
      },
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;toc_4&#34;&gt;Parameter&lt;/h2&gt;

&lt;p&gt;A parameter is a value that can be provided when you upload your template. You can set default values so you don&amp;rsquo;t always have to provide them, but these are the only values you can override when you create or update your stack. The most common usage of a parameter is probably defining the instance type of an EC2 instance.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-language-javascript&#34;&gt;   &amp;quot;Parameters&amp;quot; : {
      &amp;quot;InstanceType&amp;quot; : {
         &amp;quot;Type&amp;quot; : &amp;quot;String&amp;quot;,
         &amp;quot;Default&amp;quot; : &amp;quot;t2.micro&amp;quot;,
         &amp;quot;Description&amp;quot; : &amp;quot;Type of EC2 instance to launch&amp;quot;
      },
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;toc_5&#34;&gt;How do you use this?&lt;/h1&gt;

&lt;p&gt;We&amp;rsquo;ve now discussed the terminology and (briefly) the idea behind CloudFormation, but what we&amp;rsquo;re still missing is an explanation of how to use it. I&amp;rsquo;ve explained in my &lt;a href=&#34;http://ig.nore.me/aws/2014/07/introduction-to-the-aws-cli/&#34;&gt;introduction to the AWS CLI&lt;/a&gt; that I prefer to work using the AWS CLI tools, so I will explain the usage in those terms.&lt;/p&gt;

&lt;h2 id=&#34;toc_6&#34;&gt;Build the template&lt;/h2&gt;

&lt;p&gt;The first step is to create the CloudFormation template. This is most of the work, and is the main subject of the remainder of this article as well as a number of future articles. For now we&amp;rsquo;ll skip this though and move on to the next step in the process.&lt;/p&gt;

&lt;h2 id=&#34;toc_7&#34;&gt;Validate the template&lt;/h2&gt;

&lt;p&gt;Next up you will want to make sure that your template is valid, without running the risk of breaking a setup you already have. You can do so using the CLI validation, just take into account that this will only check for actual errors in the template. Which means it doesn&amp;rsquo;t validate against anything referred that is not present in the template.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-language-bash&#34;&gt;aws cloudformation validate-template --template-body file://cfn1-babysteps.json
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;toc_8&#34;&gt;Deploy the template&lt;/h2&gt;

&lt;p&gt;Once the template is valid, you can then deploy it. As a sidenote, while I show all these commands with the &lt;code&gt;--template-body&lt;/code&gt; parameter for a local file, it is possible to use &lt;code&gt;--template-url&lt;/code&gt; instead if you store your template on S3.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-language-bash&#34;&gt;aws cloudformation create-stack --stack-name babysteps --template-body file://cfn1-babysteps.json --profile demo
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If you want or need to fill in parameters you can do that with the &lt;code&gt;--parameters&lt;/code&gt; option leading to command such as this.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-language-bash&#34;&gt;aws cloudformation create-stack --stack-name babysteps --template-body file://cfn1-babysteps.json --parameters ParameterKey=InstanceType,ParameterValue=t2.small --profile demo
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;toc_9&#34;&gt;Waiting time&lt;/h2&gt;

&lt;p&gt;From this point on, you&amp;rsquo;ll have to wait for the creation of the CloudFormation stack. You can check the status with any combination of the below commands, but for a simple setup like this you can just watch it happen in the Console.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://assets2.nore.me/posts/babysteps_in_progress.png&#34; alt=&#34;&amp;quot;The Console shows the stack being deployed&amp;quot;&#34; /&gt;
&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-language-bash&#34;&gt;aws cloudformation list-stacks --profile demo
aws cloudformation describe-stack-events --stack-name babysteps --profile demo
aws cloudformation describe-stacks --stack-name babysteps --profile demo
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;For big stacks these options aren&amp;rsquo;t all that useful as you&amp;rsquo;d just like to get an update once it&amp;rsquo;s finished. That goes beyond the basics though, so I&amp;rsquo;ll describe that in a future article.&lt;/p&gt;

&lt;p&gt;Despite all your preparations however, it is always possible that there is a mistake in your template and the deployment will fail. When that happens, check the events to see what happened. In the below image I said I was going to provide a CIDR block while what I actually provided was a security group id. This passed validation because it was provided as a reference, but obviously I made a mistake here.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://assets2.nore.me/posts/babysteps_failed.png&#34; alt=&#34;&amp;quot;A failed stack creation&amp;quot;&#34; /&gt;
&lt;/p&gt;

&lt;h2 id=&#34;toc_10&#34;&gt;Updating and deleting&lt;/h2&gt;

&lt;p&gt;The most common task you do with CloudFormation is probably updating your stack. This has the exact same syntax as the create command, only using &lt;code&gt;update-stack&lt;/code&gt; instead of &lt;code&gt;create-stack&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-language-bash&#34;&gt;aws cloudformation update-stack --stack-name babysteps --template-body file://cfn1-babysteps.json --profile demo
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Another task you will carry out frequently if you follow along with my examples is deleting stacks. Use this with care! It will &lt;strong&gt;not&lt;/strong&gt; ask you for confirmation when deleting a stack, so make absolutely certain you&amp;rsquo;re deleting the right one. For this same reason I would recommend that any default profile you have configured for your CLI tools is not your production environment.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-language-bash&#34;&gt;aws cloudformation delete-stack --stack-name babysteps --profile demo
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;toc_11&#34;&gt;DSL&lt;/h1&gt;

&lt;p&gt;As you can see in the earlier snippets, there is a fair bit of writing involved in setting up a template. That in itself isn&amp;rsquo;t a major problem, but what is a bit annoying about the basic CloudFormation template is that it can quickly become unmanageable. One major issue is that you can&amp;rsquo;t have any comments in the JSON code, which makes it a lot harder to manage than it needs to be.&lt;/p&gt;

&lt;p&gt;Luckily, there are a number of people who have written a DSL (Domain Specific Language) for creating these files. This means that you write the CloudFormation template in a different language that you then parse into the JSON file CloudFormation understands.&lt;/p&gt;

&lt;p&gt;There are a number of DSLs out there, which you can find by searching, but the one that I use is &lt;a href=&#34;https://github.com/stevenjack/cfndsl&#34;&gt;cfndsl&lt;/a&gt;. I chose to use this one mainly because it was mentioned in the &amp;ldquo;So you think you&amp;rsquo;re an AWS ninja&amp;rdquo; presentation at the AWS Summit in Sydney. It&amp;rsquo;s certainly possible better DSLs exist, and don&amp;rsquo;t hesitate to let me know about that, but I&amp;rsquo;m familiar with cfndsl so I&amp;rsquo;ll use it here.&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;m not going to explain how the DSL works as its README file does a good enough job of that. However, I&amp;rsquo;ll give a brief example of what the above examples look like using the DSL.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-language-ruby&#34;&gt;  Parameter(&amp;quot;InstanceType&amp;quot;) {
    Description &amp;quot;Type of EC2 instance to launch&amp;quot;
    Type &amp;quot;String&amp;quot;
    Default &amp;quot;t2.micro&amp;quot;
  }

  # The Elastic IP for the Webserver
  Resource(&amp;quot;IPAddress&amp;quot;) {
    Type &amp;quot;AWS::EC2::EIP&amp;quot;
    Property(&amp;quot;Domain&amp;quot;, &amp;quot;vpc&amp;quot;)
    Property(&amp;quot;InstanceId&amp;quot;, Ref(&amp;quot;Webserver&amp;quot;))
  }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;To be fair, this doesn&amp;rsquo;t look all that different, but you can already see that the syntax is easier to read and that comments can improve on this even more.&lt;/p&gt;

&lt;p&gt;Because it is more readable and concise, I will use the DSL code for the examples in my articles, but the templates will also be available in full on Github. As both DSL and compiled JSON file.&lt;/p&gt;

&lt;h1 id=&#34;toc_12&#34;&gt;Gotcha&amp;rsquo;s&lt;/h1&gt;

&lt;p&gt;Despite what we&amp;rsquo;d all want, CloudFormation isn&amp;rsquo;t perfect and has its pitfalls. There have been plenty of times where I wasted time because I didn&amp;rsquo;t pay enough attention to the documentation. For that reason I&amp;rsquo;ll once again link to the &lt;a href=&#34;http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-template-resource-type-ref.html&#34;&gt;AWS Resource Types reference&lt;/a&gt; and remind you that reading the details is important.&lt;/p&gt;

&lt;p&gt;Another thing to remember is to make sure you validate your template before you update. If an update fails, CloudFormation will try to roll back the changes but if the problem is big enough this might not always succeed and your stack could end up in a state of &lt;code&gt;UPDATE_ROLLBACK_FAILED&lt;/code&gt;. This state will prevent you from updating your stack in the future and you can&amp;rsquo;t fix that through either the Console or CLI tools. No, you really don&amp;rsquo;t want to get in that state.&lt;/p&gt;

&lt;h1 id=&#34;toc_13&#34;&gt;Building the template&lt;/h1&gt;

&lt;p&gt;This example is available on Github as both the &lt;a href=&#34;https://github.com/ArjenSchwarz/cloudformation-templates/blob/master/cfn1-babysteps/cfn1-babysteps.rb&#34;&gt;DSL&lt;/a&gt; and &lt;a href=&#34;https://github.com/ArjenSchwarz/cloudformation-templates/blob/master/cfn1-babysteps/cfn1-babysteps.json&#34;&gt;JSON file&lt;/a&gt;. If you prefer you can download them now, or do so after finishing this article.&lt;/p&gt;

&lt;p&gt;In case you aren&amp;rsquo;t familiar with all the resource types mentioned here, there is a link to the relevant section of the AWS documentation when they come up. I won&amp;rsquo;t go into detail about each of them here as that would make this article a lot longer. Instead, I will walk through the CloudFormation template step by step, explaining what happens. The comments in the DSL file serve the same purpose, but to keep things more concise I&amp;rsquo;ve removed those from the below snippets.&lt;/p&gt;

&lt;p&gt;First we initiate the template, by providing the necessary template version and description.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-language-ruby&#34;&gt;CloudFormation {
  AWSTemplateFormatVersion &amp;quot;2010-09-09&amp;quot;

  Description &amp;quot;Babysteps example consisting of 2 EC2 instances behind an ELB&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Next up are some variables we will use later in the template. A name we can use to identify the template, and the number of EC2 instances we wish to spin up.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-language-ruby&#34;&gt;  templateName = &amp;quot;Babysteps&amp;quot;

  numberOfInstances = 2
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now we&amp;rsquo;ve passed the preparations and we&amp;rsquo;ve reached more interesting things with the Parameters. I&amp;rsquo;ve explained what these are above, so I&amp;rsquo;ll limit myself here to just mentioning the ones we&amp;rsquo;ve got. First is the InstanceType for the EC2 instances, followed by the &lt;a href=&#34;http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-key-pairs.html&#34;&gt;EC2 key pair&lt;/a&gt; for accessing the EC2 instances through SSH. You will have to ensure this key is registered in AWS first, which is easiest done in the Console.&lt;/p&gt;

&lt;p&gt;The last parameter is for determining which IP addresses can SSH into your server. I&amp;rsquo;ve explained my reasoning for having this limited to the template&amp;rsquo;s VPC in my article about &lt;a href=&#34;http://ig.nore.me/aws/2014/08/securing-ssh-access-with-cloudformation/&#34;&gt;Securing SSH access with Cloudformation&lt;/a&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-language-ruby&#34;&gt;  Parameter(&amp;quot;InstanceType&amp;quot;) {
    Description &amp;quot;Type of EC2 instance to launch&amp;quot;
    Type &amp;quot;String&amp;quot;
    Default &amp;quot;t2.micro&amp;quot;
  }

  Parameter(&amp;quot;KeyName&amp;quot;) {
    Description &amp;quot;Name of an existing EC2 key pair to enable SSH access to the new EC2 instance&amp;quot;
    Type &amp;quot;String&amp;quot;
    Default &amp;quot;blogdemo&amp;quot;
  }

  Parameter(&amp;quot;SshIp&amp;quot;) {
    Description &amp;quot;IP address that should have direct access through SSH&amp;quot;
    Type &amp;quot;String&amp;quot;
    Default &amp;quot;10.42.0.0/24&amp;quot;
  }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I haven&amp;rsquo;t explained mappings yet, but they are a way within CloudFormation to refer to different values. The first mapping is a standard one where you can use the region to find the correct AMI. The second one is mostly for me to keep things clear in my mind, but this same effect could be achieved with variables.&lt;/p&gt;

&lt;p&gt;A better solution for this would be to make it similar to the region setup and define these values by region. However, I like having an overview such as this and especially when the number of Subnets grows.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-language-ruby&#34;&gt;  Mapping(&amp;quot;AWSRegionArch2AMI&amp;quot;, {
            &amp;quot;us-east-1&amp;quot; =&amp;gt; { &amp;quot;AMI&amp;quot; =&amp;gt; &amp;quot;ami-864d84ee&amp;quot; }
  })

  Mapping(&amp;quot;SubnetConfig&amp;quot;, {
      &amp;quot;VPC&amp;quot;     =&amp;gt; { &amp;quot;CIDR&amp;quot; =&amp;gt; &amp;quot;10.42.0.0/16&amp;quot; },
      &amp;quot;Public&amp;quot;  =&amp;gt; { &amp;quot;CIDR&amp;quot; =&amp;gt; &amp;quot;10.42.0.0/24&amp;quot; }
  })
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now we&amp;rsquo;ll start creating resources and, as we need to put everything in there, the &lt;a href=&#34;http://aws.amazon.com/vpc/&#34; title=&#34;Marketing documentation for VPC&#34;&gt;VPC&lt;/a&gt; and &lt;a href=&#34;http://docs.aws.amazon.com/AmazonVPC/latest/UserGuide/VPC_Subnets.html&#34; title=&#34;Technical documentation for VPC and Subnets&#34;&gt;Subnet&lt;/a&gt; will come first. Using CloudFormation&amp;rsquo;s &lt;a href=&#34;http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/intrinsic-function-reference-findinmap.html&#34;&gt;Fn::FindInMap&lt;/a&gt; functionality we get the values from the mapping above for the configuration.&lt;/p&gt;

&lt;p&gt;You will also notice the first references to other resources here using &lt;code&gt;Ref&lt;/code&gt;. This is the only way to refer to other resources in the same template, so it&amp;rsquo;s nice that AWS made it easy.
Following the creation of the VPC and Subnet we need to ensure these have proper access to the Internet, which is what all the routing and gateway resources are for.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-language-ruby&#34;&gt;  Resource(&amp;quot;BabyVPC&amp;quot;) {
    Type &amp;quot;AWS::EC2::VPC&amp;quot;
    Property(&amp;quot;CidrBlock&amp;quot;, FnFindInMap(&amp;quot;SubnetConfig&amp;quot;, &amp;quot;VPC&amp;quot;, &amp;quot;CIDR&amp;quot;))
  }

  Resource(&amp;quot;PublicSubnet&amp;quot;) {
    Type &amp;quot;AWS::EC2::Subnet&amp;quot;
    Property(&amp;quot;VpcId&amp;quot;, Ref(&amp;quot;BabyVPC&amp;quot;))
    Property(&amp;quot;CidrBlock&amp;quot;, FnFindInMap(&amp;quot;SubnetConfig&amp;quot;, &amp;quot;Public&amp;quot;,&amp;quot;CIDR&amp;quot;))
  }

  Resource(&amp;quot;InternetGateway&amp;quot;) {
      Type &amp;quot;AWS::EC2::InternetGateway&amp;quot;
  }

  Resource(&amp;quot;AttachGateway&amp;quot;) {
       Type &amp;quot;AWS::EC2::VPCGatewayAttachment&amp;quot;
       Property(&amp;quot;VpcId&amp;quot;, Ref(&amp;quot;BabyVPC&amp;quot;))
       Property(&amp;quot;InternetGatewayId&amp;quot;, Ref(&amp;quot;InternetGateway&amp;quot;))
  }

  Resource(&amp;quot;PublicRouteTable&amp;quot;) {
    Type &amp;quot;AWS::EC2::RouteTable&amp;quot;
    Property(&amp;quot;VpcId&amp;quot;, Ref(&amp;quot;BabyVPC&amp;quot;))
  }

  Resource(&amp;quot;PublicRoute&amp;quot;) {
    Type &amp;quot;AWS::EC2::Route&amp;quot;
    DependsOn &amp;quot;AttachGateway&amp;quot;
    Property(&amp;quot;RouteTableId&amp;quot;, Ref(&amp;quot;PublicRouteTable&amp;quot;))
    Property(&amp;quot;DestinationCidrBlock&amp;quot;, &amp;quot;0.0.0.0/0&amp;quot;)
    Property(&amp;quot;GatewayId&amp;quot;, Ref(&amp;quot;InternetGateway&amp;quot;))
  }

  Resource(&amp;quot;PublicSubnetRouteTableAssociation&amp;quot;) {
    Type &amp;quot;AWS::EC2::SubnetRouteTableAssociation&amp;quot;
    Property(&amp;quot;SubnetId&amp;quot;, Ref(&amp;quot;PublicSubnet&amp;quot;))
    Property(&amp;quot;RouteTableId&amp;quot;, Ref(&amp;quot;PublicRouteTable&amp;quot;))
  }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Where the VPC and its requirements were for providing a place to store the resources, we&amp;rsquo;ll now have the last bit of preparation: &lt;a href=&#34;http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/using-network-security.html&#34;&gt;the security groups&lt;/a&gt;. These security groups are required as they&amp;rsquo;ll define access rules for the EC2 instances and ELB we&amp;rsquo;ll set up later.&lt;/p&gt;

&lt;p&gt;Again for readability, I define the various rules as Ruby arrays before attaching them to the security groups. The rules defined for the EC2 Instances are to only allow port 80 access from the ELB Security Group and SSH access from the previously defined SshIp parameter. For the ELB we only need world access on port 80.&lt;/p&gt;

&lt;p&gt;Once we have these, the actual security group resources only need to refer to the rules and VPC. The only other things we define here are for our own convenience: the description (which is mandatory) and tags (which are not). These are both there to make it easier to find the resources again later.
The &lt;code&gt;Name&lt;/code&gt; tag is also recognised by the AWS Console and shown in the Name field there.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-language-ruby&#34;&gt;  ec2SecurityIngres = Array.new

  ec2SecurityIngres.push({
    &amp;quot;IpProtocol&amp;quot; =&amp;gt; &amp;quot;tcp&amp;quot;,
    &amp;quot;FromPort&amp;quot; =&amp;gt; &amp;quot;80&amp;quot;,
    &amp;quot;ToPort&amp;quot; =&amp;gt; &amp;quot;80&amp;quot;,
    &amp;quot;SourceSecurityGroupId&amp;quot; =&amp;gt; Ref(&amp;quot;ELBSecurityGroup&amp;quot;)
  })

  ec2SecurityIngres.push({
    &amp;quot;IpProtocol&amp;quot; =&amp;gt; &amp;quot;tcp&amp;quot;,
    &amp;quot;FromPort&amp;quot; =&amp;gt; &amp;quot;22&amp;quot;,
    &amp;quot;ToPort&amp;quot; =&amp;gt; &amp;quot;22&amp;quot;,
    &amp;quot;CidrIp&amp;quot; =&amp;gt; Ref(&amp;quot;SshIp&amp;quot;)
  })

  port80Open = [{
                  &amp;quot;IpProtocol&amp;quot; =&amp;gt; &amp;quot;tcp&amp;quot;,
                  &amp;quot;FromPort&amp;quot; =&amp;gt; &amp;quot;80&amp;quot;,
                  &amp;quot;ToPort&amp;quot; =&amp;gt; &amp;quot;80&amp;quot;,
                  &amp;quot;CidrIp&amp;quot; =&amp;gt; &amp;quot;0.0.0.0/0&amp;quot;
                }]

  Resource(&amp;quot;InstanceSecurityGroup&amp;quot;) {
    Type &amp;quot;AWS::EC2::SecurityGroup&amp;quot;
    Property(&amp;quot;Tags&amp;quot;, [{&amp;quot;Key&amp;quot; =&amp;gt; &amp;quot;Name&amp;quot;, &amp;quot;Value&amp;quot; =&amp;gt; &amp;quot;Babysteps EC2&amp;quot;}])
    Property(&amp;quot;VpcId&amp;quot;, Ref(&amp;quot;BabyVPC&amp;quot;))
    Property(&amp;quot;GroupDescription&amp;quot; , templateName + &amp;quot; - EC2 instances: HTTP and SSH access&amp;quot;)
    Property(&amp;quot;SecurityGroupIngress&amp;quot;, ec2SecurityIngres)
  }

  Resource(&amp;quot;ELBSecurityGroup&amp;quot;) {
    Type &amp;quot;AWS::EC2::SecurityGroup&amp;quot;
    Property(&amp;quot;Tags&amp;quot;, [{&amp;quot;Key&amp;quot; =&amp;gt; &amp;quot;Name&amp;quot;, &amp;quot;Value&amp;quot; =&amp;gt; &amp;quot;Babysteps ELB&amp;quot;}])
    Property(&amp;quot;VpcId&amp;quot;, Ref(&amp;quot;BabyVPC&amp;quot;))
    Property(&amp;quot;GroupDescription&amp;quot; , templateName + &amp;quot; - ELB: HTTP access&amp;quot;)
    Property(&amp;quot;SecurityGroupIngress&amp;quot;, port80Open)
    Property(&amp;quot;SecurityGroupEgress&amp;quot;, port80Open)
  }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;http://assets2.nore.me/posts/babysteps_securitygroups.png&#34; alt=&#34;&amp;quot;The created security groups in the AWS Console&amp;quot;&#34; /&gt;
&lt;/p&gt;

&lt;p&gt;So, we have arrived at the &lt;a href=&#34;http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/concepts.html&#34; title=&#34;EC2 technical documentation&#34;&gt;EC2 instances&lt;/a&gt;. Much of what you see here has already been discussed earlier. We assign the instance type, image id, keyname, subnet, and security group using the tools we&amp;rsquo;re now familiar with. There are a couple of things worth noting though. First is of course the general syntax. Instead of defining each instance separately as we would for the JSON setup, we create a loop so we can be sure each instance is the same.&lt;/p&gt;

&lt;p&gt;The next thing to note is the &lt;code&gt;babystepsServerRefs&lt;/code&gt; array. We&amp;rsquo;re going to fill this with references to each instance so we can use it when defining the ELB. We also need to assign an &lt;a href=&#34;http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/elastic-ip-addresses-eip.html&#34;&gt;Elastic IP&lt;/a&gt; to each instance so we can access the servers from our computer.&lt;br /&gt;
Below that you will see something else we haven&amp;rsquo;t discussed yet: Outputs. An Output can show additional information when you collect information about the stack. Using, for example, the &lt;code&gt;describe-stacks&lt;/code&gt; CLI command. Having the IPs in there means you don&amp;rsquo;t have to go looking for them. To get the IP Address of the instance we use &lt;a href=&#34;http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/intrinsic-function-reference-getatt.html&#34;&gt;Fn::GetAtt&lt;/a&gt; which can retrieve attributes made available by a resource.&lt;/p&gt;

&lt;p&gt;You might have noticed I skipped a part in the instance resources themselves. The &lt;code&gt;UserData&lt;/code&gt; property is provided to an instance only upon creation. You can use this to configure an instance when it&amp;rsquo;s first booted up, but only at that time. As it&amp;rsquo;s not the main focus of this example, the only thing we do here is install Apache so we can be sure the ELB will treat our instances as healthy. Just keep in mind that this is a powerful tool that you can use for any type of configuration management.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-language-ruby&#34;&gt;  babystepsServerRefs = Array.new

  (1..numberOfInstances).each do |instanceNumber|
    instanceName = &amp;quot;Babysteps#{instanceNumber}&amp;quot;
    Resource(instanceName) {
      Type &amp;quot;AWS::EC2::Instance&amp;quot;
      Property(&amp;quot;SubnetId&amp;quot;, Ref(&amp;quot;PublicSubnet&amp;quot;))
      Property(&amp;quot;Tags&amp;quot;, [{&amp;quot;Key&amp;quot; =&amp;gt; &amp;quot;Name&amp;quot;, &amp;quot;Value&amp;quot; =&amp;gt; &amp;quot;#{templateName}-#{instanceNumber}&amp;quot;}])
      Property(&amp;quot;ImageId&amp;quot;,
                FnFindInMap( &amp;quot;AWSRegionArch2AMI&amp;quot;, Ref(&amp;quot;AWS::Region&amp;quot;),&amp;quot;AMI&amp;quot;))
      Property(&amp;quot;InstanceType&amp;quot;, Ref(&amp;quot;InstanceType&amp;quot;))
      Property(&amp;quot;KeyName&amp;quot;, Ref(&amp;quot;KeyName&amp;quot;))
      Property(&amp;quot;SecurityGroupIds&amp;quot;, [Ref(&amp;quot;InstanceSecurityGroup&amp;quot;)])
      Property(&amp;quot;UserData&amp;quot;, {
                          &amp;quot;Fn::Base64&amp;quot; =&amp;gt;
                            FnJoin(&amp;quot;\n&amp;quot;,[
                              &amp;quot;#!/bin/bash&amp;quot;,
                              &amp;quot;apt-get install -y apache2&amp;quot;
                              ]
                          )})
    }

    Resource (&amp;quot;BabyIP#{instanceNumber}&amp;quot;) {
      Type &amp;quot;AWS::EC2::EIP&amp;quot;;
      Property(&amp;quot;Domain&amp;quot;, &amp;quot;vpc&amp;quot;)
      Property(&amp;quot;InstanceId&amp;quot;, Ref(instanceName))
    }

    babystepsServerRefs.push(Ref(instanceName))

    Output(&amp;quot;#{instanceName}IpAddress&amp;quot;) {
      Value FnGetAtt(instanceName, &amp;quot;PublicIp&amp;quot;)
    }
  end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;http://assets2.nore.me/posts/babysteps_outputs.png&#34; alt=&#34;&amp;quot;The outputs of the stack&amp;quot;&#34; /&gt;
&lt;/p&gt;

&lt;p&gt;With the &lt;a href=&#34;http://aws.amazon.com/documentation/elastic-load-balancing/&#34;&gt;Elastic LoadBalancer&lt;/a&gt; we have reached the last part of this example. Once again we go through the motions of connecting to the various resources we have defined earlier, including using the &lt;code&gt;babystepsServerRefs&lt;/code&gt; array. Other than that we set up the listeners (limited to port 80 as we have no other ports open) and define the health check.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-language-ruby&#34;&gt;  Resource(&amp;quot;BabystepsLoadBalancer&amp;quot;) {
    Type &amp;quot;AWS::ElasticLoadBalancing::LoadBalancer&amp;quot;
    Property(&amp;quot;Subnets&amp;quot;, [Ref(&amp;quot;PublicSubnet&amp;quot;)])
    Property(&amp;quot;SecurityGroups&amp;quot;, [Ref(&amp;quot;ELBSecurityGroup&amp;quot;)])
    Property(&amp;quot;Listeners&amp;quot; , [{
                                &amp;quot;LoadBalancerPort&amp;quot; =&amp;gt; &amp;quot;80&amp;quot;,
                                &amp;quot;InstancePort&amp;quot; =&amp;gt; &amp;quot;80&amp;quot;,
                                &amp;quot;Protocol&amp;quot; =&amp;gt; &amp;quot;HTTP&amp;quot;
                              }])
    Property(&amp;quot;HealthCheck&amp;quot; , {
                &amp;quot;Target&amp;quot; =&amp;gt; &amp;quot;HTTP:80/index.html&amp;quot;,
                &amp;quot;HealthyThreshold&amp;quot; =&amp;gt; &amp;quot;3&amp;quot;,
                &amp;quot;UnhealthyThreshold&amp;quot; =&amp;gt; &amp;quot;5&amp;quot;,
                &amp;quot;Interval&amp;quot; =&amp;gt; &amp;quot;30&amp;quot;,
                &amp;quot;Timeout&amp;quot; =&amp;gt; &amp;quot;5&amp;quot;
              })
    Property(&amp;quot;Instances&amp;quot;, babystepsServerRefs)
  }
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;toc_14&#34;&gt;Conclusion&lt;/h1&gt;

&lt;p&gt;So, we&amp;rsquo;ve come to the end of this introduction. It was a bit longer than I expected, but I don&amp;rsquo;t think it would be as useful if I left out the example. Hopefully you learned something from this, and you can use it for your own projects.&lt;/p&gt;

&lt;p&gt;When looking at the snippets above you might come to believe that CloudFormation is rather verbose, which is true, but you should also remember that you&amp;rsquo;re setting up an entire infrastructure. In the past you would have set up physical servers, you can now achieve the same result by writing a single template.&lt;br /&gt;
Using the above example, it would be easy to update this to provide an extra server or to upgrade the specs of these servers. And if you have your template in version control you will later be able to find out when and why you made this change. To me that combination of ease of control and sheer power is why I like CloudFormation.&lt;/p&gt;

&lt;p&gt;In future articles I plan to show more extensive examples; going past the basics while building more interesting infrastructures. If there is anything in particular you would like to see, let me know and I will see what I can do. In the meantime though, play around with it a bit yourself.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Securing SSH access with Cloudformation</title>
      <link>http://localhost:1313/2014/08/securing-ssh-access-with-cloudformation/</link>
      <pubDate>Sun, 10 Aug 2014 00:00:00 UTC</pubDate>
      
      <guid>http://localhost:1313/2014/08/securing-ssh-access-with-cloudformation/</guid>
      <description>

&lt;p&gt;In order to improve security for my EC2-instance, but still keep it useful, I came up with a script that automatically opens up SSH access for my current IP address.&lt;/p&gt;

&lt;h1 id=&#34;toc_0&#34;&gt;Why did I do this?&lt;/h1&gt;

&lt;p&gt;Yesterday I decided to take a look at the Trusted Advisor in the AWS console (at least the part of it that Amazon has made freely available). Most of what I found there wasn&amp;rsquo;t a big shock, but one of them stood out to me: I left the SSH port on my EC2 instance open to the whole world.&lt;/p&gt;

&lt;p&gt;Of course, when I did that I had a perfectly valid reason for it, as I wanted to be able to access my EC2 instance from anywhere. As access is limited by an SSH key anyway that seemed good enough. Of course, good enough isn&amp;rsquo;t. So that needed to change.&lt;/p&gt;

&lt;h1 id=&#34;toc_1&#34;&gt;How did I do it?&lt;/h1&gt;

&lt;p&gt;The easiest solution was of course to restrict access to my IP address, and that&amp;rsquo;s how I started. This meant I needed my external IP address. Easy enough to find, but as usual a bit of a hassle to go to the &lt;a href=&#34;http://www.whatismyip.com&#34;&gt;whatismyip.com website&lt;/a&gt;. So, after finding my IP and updating the security group in my CloudFormation configuration, I decided that was enough and I made a &lt;a href=&#34;http://www.smilesoftware.com/TextExpander/index.html&#34;&gt;TextExpander&lt;/a&gt; snippet to find the IP for me in the future.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-language-bash&#34;&gt;#!/bin/sh
/bin/echo -n `curl -s checkip.dyndns.org|sed -e &#39;s/.*Current IP Address: //&#39; -e &#39;s/&amp;lt;.*$//&#39;`
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Useful of course, but not the main reason for this article. The result of my changes so far was that I couldn&amp;rsquo;t access the EC2 instance from anywhere other than home. At least not without changing the IP address in the CloudFormation template and updating it again.&lt;/p&gt;

&lt;p&gt;This could be done in an easier way. I just had to change the CloudFormation template so that I could provide the IP as a parameter.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-language-json&#34;&gt;  &amp;quot;Parameters&amp;quot; : {
      &amp;quot;SshIp&amp;quot; : {
         &amp;quot;Type&amp;quot; : &amp;quot;String&amp;quot;,
         &amp;quot;Default&amp;quot; : &amp;quot;10.0.0.0/24&amp;quot;,
         &amp;quot;Description&amp;quot; : &amp;quot;IP address that should have direct access through SSH&amp;quot;
      }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;By default it is set to only receive SSH connections from within its subnet, but I can override that by providing the IP address I want to have access. This of course is standard CloudFormation stuff, but it&amp;rsquo;s also just the first step.&lt;/p&gt;

&lt;p&gt;Combined with the TextExpander snippet I now had a fairly easy way to enable SSH access from my current IP, but it could still be easier. So, I wrote another function to include in my &lt;a href=&#34;https://github.com/ArjenSchwarz/oh-my-zsh/blob/master/plugins/blogs/blogs.plugin.zsh&#34;&gt;oh-my-zsh config&lt;/a&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-language-bash&#34;&gt;# Update the cloudformation stack with my current external IP address
blogcfssh() {
  externalip=`curl -s checkip.dyndns.org | sed -e &#39;s/.*Current IP Address: //&#39; -e &#39;s/&amp;lt;.*$//&#39;`
  echo &amp;quot;Current IP is: ${externalip}\n&amp;quot;
  echo &amp;quot;Updating blog cloudformation template with current IP address&amp;quot;
  cd ~/projects/server_personal; aws cloudformation update-stack --stack-name blog-server --template-body file://cloudformation-generated.json --parameters ParameterKey=SshIp,ParameterValue=${externalip}/32 --profile blogs
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Using the above function, I retrieve my current IP address and fill it in as the parameter for the CloudFormation stack. This means that all I need to do to gain SSH access from my current location is to run &lt;code&gt;blogcfssh&lt;/code&gt;. And as I have a similar function for updating the stack with just the default values, I can just as easily close this access.&lt;/p&gt;

&lt;h1 id=&#34;toc_2&#34;&gt;Improvements&lt;/h1&gt;

&lt;p&gt;This script isn&amp;rsquo;t perfect yet, as it&amp;rsquo;s too dependent on my current setup. Instead the CloudFormation template should be retrieved from an S3 bucket to ensure it works from everywhere. It would also be nice to have it automatically check if the update has finished and inform me of that.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Introduction to the AWS CLI</title>
      <link>http://localhost:1313/2014/07/introduction-to-the-aws-cli/</link>
      <pubDate>Sun, 27 Jul 2014 00:00:00 UTC</pubDate>
      
      <guid>http://localhost:1313/2014/07/introduction-to-the-aws-cli/</guid>
      <description>

&lt;p&gt;As I&amp;rsquo;ll be writing a number of articles about AWS in the future, I figured it would be a good idea to first introduce the basics. This article will therefore introduce the AWS API, and guide you through setting it up for your own use.&lt;/p&gt;

&lt;h1 id=&#34;toc_0&#34;&gt;Background&lt;/h1&gt;

&lt;p&gt;AWS has two main interfaces: the AWS Console you access through the web browser and the API. While the Console looks a lot nicer and certainly has its uses, I personally prefer using the API wherever possible.&lt;/p&gt;

&lt;p&gt;Let me clarify that while there are a large number of AWS tools that run from the command line the one I&amp;rsquo;m talking about here is the &lt;a href=&#34;http://aws.amazon.com/cli/&#34;&gt;AWS Command Line Interface&lt;/a&gt;. This article will not touch on any service specific tool that can be found on &lt;a href=&#34;http://aws.amazon.com/tools/&#34;&gt;the AWS Tools page&lt;/a&gt;. I also have no intention of rewriting the entire &lt;a href=&#34;http://docs.aws.amazon.com/cli/latest/userguide/cli-chap-welcome.html&#34;&gt;user guide&lt;/a&gt;, so I recommend you read that after this article.&lt;/p&gt;

&lt;h1 id=&#34;toc_1&#34;&gt;Why use the API?&lt;/h1&gt;

&lt;p&gt;When you read the above, you are likely to ask why I prefer using the API. A fair enough question, so I&amp;rsquo;ll briefly try to answer that in a way that might convince you.&lt;/p&gt;

&lt;p&gt;The main reason for this is efficiency. While you can do many things with the Console, the API makes it a lot easier to do these things. And not only make them easier, but it will allow you to automate them. Let me give a simple example here:&lt;/p&gt;

&lt;p&gt;The images for this article are pushed up to an S3 bucket after I create them, and then I insert a Markdown image tag in my text editor with that URL. While I can upload them through the Console that takes more attention away from writing than I care to. So instead I use a command to push them up from the command line.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-language-bash&#34;&gt;aws s3api put-object --bucket assets2.nore.me --key posts/PermissionsIAM.png --body PermissionsIAM.png --profile blogs
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I can now use a &lt;a href=&#34;http://smilesoftware.com/TextExpander/index.html&#34;&gt;TextExpander&lt;/a&gt; snippet for this so that it will only take me moments to upload an image. And when I decide that the image needs some more refinement I can simply run the command again to have the updated image instantly available.&lt;/p&gt;

&lt;p&gt;However, this is just the first step in what&amp;rsquo;s possible. To improve on this I created a small script that will handle the second step of my process as well.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-language-bash&#34;&gt;ignoreimage() {
  aws s3api put-object --bucket assets2.nore.me --key posts/$1 --body $1 --profile blogs;
  echo &amp;quot;![alttext](http://assets2.nore.me/posts/$1)&amp;quot; | pbcopy;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This little snippet of code, which is in my &lt;a href=&#34;https://github.com/ArjenSchwarz/oh-my-zsh/blob/master/plugins/blogs/blogs.plugin.zsh&#34;&gt;zsh config&lt;/a&gt;, will do everything I need. It simply takes the first argument and uploads the file with that name to my S3 bucket. After that it will then copy the resulting image url in Markdown format to my clipboard.&lt;/p&gt;

&lt;p&gt;Now do you see why I like this so much? It just makes life so much easier and pleasant.&lt;/p&gt;

&lt;h1 id=&#34;toc_2&#34;&gt;Setting it up&lt;/h1&gt;

&lt;p&gt;Installing the CLI tools themselves is easy, and the instructions for doing so can be found on the &lt;a href=&#34;http://aws.amazon.com/cli/&#34;&gt;AWS CLI page&lt;/a&gt;. Next up is installing auto completion, or command completion as it&amp;rsquo;s called in the AWS documentation. The official guide for installing this is at the bottom of the &lt;a href=&#34;http://docs.aws.amazon.com/cli/latest/userguide/cli-chap-getting-started.html&#34;&gt;Getting Started page in the guide&lt;/a&gt;.
&amp;gt; An easier alternative if you&amp;rsquo;re a user of &lt;a href=&#34;https://github.com/robbyrussell/oh-my-zsh&#34;&gt;oh my zsh&lt;/a&gt; is to enable the &lt;code&gt;aws&lt;/code&gt; plugin in your &lt;code&gt;.zshrc&lt;/code&gt; config.&lt;/p&gt;

&lt;p&gt;Regardless of the installation method, the end result here is that you have excellent tab completion for all commands and sub-commands.&lt;/p&gt;

&lt;h2 id=&#34;toc_3&#34;&gt;Adding an API user&lt;/h2&gt;

&lt;p&gt;Next we will need to create an IAM user and its access key to ensure we can use the API. For this you will need to go into the IAM section of your &lt;a href=&#34;https://console.aws.amazon.com&#34;&gt;AWS Console&lt;/a&gt;. In case you haven&amp;rsquo;t used this yet, IAM is where all user and access management takes place and you can access it through the services tab.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://assets2.nore.me/posts/SelectIAM.png&#34; alt=&#34;Select IAM&#34; /&gt;
&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Q: Why do we create a new user instead of using an existing one?
A: Best practice and security. While in a business account it&amp;rsquo;s easier to give an existing user API access, with a root account having a separate user means you can only give those permissions you need to, or easily disable access when you want to.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;In the IAM section, you should then click on Create New Users and fill in the user name of your choosing. Personally I prefer a recognisable name like &lt;code&gt;api-access&lt;/code&gt;, but any name will work. However, make sure that the &lt;code&gt;Generate an access key for each User&lt;/code&gt; flag is enabled. Continuing on, the next screen is the important one, and you will need to either make a note of or download the access key displayed there.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://assets2.nore.me/posts/DownloadIAM.png&#34; alt=&#34;Download Credentials&#34; /&gt;
&lt;/p&gt;

&lt;p&gt;One last step is needed in the AWS Console before we can leave this graphical world behind, and that is ensuring our user has all the permissions we need. While you can finetune all of your permissions, for now we just want to have a user we can use for everything.&lt;br /&gt;
In this case that means full access to everything except user management. There is a predefined permission for that, so let&amp;rsquo;s just use that. To set this, first select your created user and then in the &lt;code&gt;Permissions&lt;/code&gt; tab choose to attach a user policy. You can then select &lt;code&gt;Power User Access&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://assets2.nore.me/posts/PermissionsIAM.png&#34; alt=&#34;Select Power User Access&#34; /&gt;
&lt;/p&gt;

&lt;h2 id=&#34;toc_4&#34;&gt;Setting up a profile&lt;/h2&gt;

&lt;p&gt;The last part of the setup is to configure your profiles. While you are simply playing around it is likely that you will only have a single profile, but if you use different regions or even different AWS accounts you will need more than one. Having a profile also makes it easier to prevent accidents from happening where you do things in the wrong region.&lt;br /&gt;
You can define the profile you use in your commands by adding &lt;code&gt;--profile profilename&lt;/code&gt; to your AWS commands. My examples at the beginning of the article did this for my &lt;code&gt;blogs&lt;/code&gt; profile. If you don&amp;rsquo;t specify a specific profile, AWS will fall back to your default profile.&lt;/p&gt;

&lt;p&gt;This is done by creating a config file in &lt;code&gt;~/.aws/config&lt;/code&gt;. This file has a very simple structure. You define the name of the profile; and this is followed by your prefered output type (json, text, or table), the region, and the access key information we collected earlier. Any of these can be overridden when you run your commands, but having them defined is easier.&lt;br /&gt;
As an illustration the below setup is based on the credentials I used earlier.
&amp;gt; Before you try if these keys work, that user was deleted before I posted this article.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-language-ini&#34;&gt;[default]
output = json
region = us-east-1
aws_access_key_id = AKIAIGO7FFTDQ63DNZQ
aws_secret_access_key = e4bKFouhnFEsB3I0MM021a5lyLAEtWFhwAgi2qZW

[profile sydney]
output = json
region = ap-southeast-2
aws_access_key_id = AKIAIGO7FFTDQ63DNZQ
aws_secret_access_key = e4bKFouhnFEsB3I0MM021a5lyLAEtWFhwAgi2qZW
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;toc_5&#34;&gt;Trying it out&lt;/h1&gt;

&lt;p&gt;In future articles I will give more examples of what you can do with this, but the best way to start is by reading a bit through the &lt;a href=&#34;http://docs.aws.amazon.com/cli/latest/userguide/cli-chap-getting-started.html&#34;&gt;user guide&lt;/a&gt; I mentioned before and playing around a bit.
The CLI tools give you good access to documentation at every level by including the help command. That means you can run &lt;code&gt;aws s3api help&lt;/code&gt; for help on the general commands available for the s3api, or you can run &lt;code&gt;aws s3api put-object help&lt;/code&gt; for the details and arguments for the put-object command.&lt;/p&gt;

&lt;p&gt;One last tip, while you&amp;rsquo;re playing around it might be a good idea to either restrict your playing to a region where you don&amp;rsquo;t have anything running, or even just use a completely new AWS account. As the API is built for efficiency, that also means there are no confirmation requests when you delete something. Besides, using a completely new AWS account means that you can make use of the free tier while playing.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>PHP Quality</title>
      <link>http://localhost:1313/2014/07/php-quality/</link>
      <pubDate>Thu, 17 Jul 2014 00:00:00 UTC</pubDate>
      
      <guid>http://localhost:1313/2014/07/php-quality/</guid>
      <description>

&lt;p&gt;When it comes to software development, quality is often a difficult thing to measure. Often you will be able to recognize it when you see it, but defining why something is well done is harder. Luckily there are a number of &lt;a href=&#34;http://phpqatools.org&#34;&gt;tools&lt;/a&gt; and &lt;a href=&#34;http://www.php-fig.org/psr/&#34;&gt;standards&lt;/a&gt; out there that will enable you to put metrics against your code.&lt;/p&gt;

&lt;p&gt;The question is how and when to use these tools? There are two moments when you want checks done against your code. Before you commit your code - in order to prevent fatal errors from entering your codebase - and after your code is pushed up - when you can gather more in-depth information without it interfering with your workflow.&lt;/p&gt;

&lt;p&gt;If you are a developer, you will most likely already be aware of the solutions to these problems. &lt;a href=&#34;http://git-scm.com/book/en/Customizing-Git-Git-Hooks&#34; title=&#34;Git - Git Hooks&#34;&gt;Git Hooks&lt;/a&gt; (or the equivalent in your VCS of choice) and a Continuous Integration system like &lt;a href=&#34;http://travis-ci.org&#34; title=&#34;Travis CI - Free Hosted Continuous Integration Platform for the Open Source Community&#34;&gt;Travis&lt;/a&gt; or &lt;a href=&#34;http://jenkins-ci.org&#34; title=&#34;Welcome to Jenkins CI! | Jenkins CI&#34;&gt;Jenkins&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;This article introduces a &lt;a href=&#34;http://github.com/evolution7/qa-tools&#34;&gt;evolution7/qa-tools library&lt;/a&gt; that can ease the setup and sharing across team members for both of these steps.&lt;/p&gt;

&lt;h1 id=&#34;toc_0&#34;&gt;Continuous Integration&lt;/h1&gt;

&lt;p&gt;While I am long time user of Jenkins for my Continuous Integration tool. For the library the actual CI tool being used is irrelevant as all that matters is what you can do with it, but I will use Jenkins as the example CI in this article as I know it best.&lt;/p&gt;

&lt;h2 id=&#34;toc_1&#34;&gt;How this usually works&lt;/h2&gt;

&lt;p&gt;Just a few years ago when you wanted to set up Continuous Integration for a PHP project you would end up with a server (or VM) on which you would install all the different PEAR packages. This process was greatly eased by the &lt;a href=&#34;http://jenkins-php.org&#34; title=&#34;Template for Jenkins Jobs for PHP Projects&#34;&gt;Jenkins PHP&lt;/a&gt; site, which has provided a nice overview of PEAR packages and example &lt;code&gt;build.xml&lt;/code&gt; files that should be installed.&lt;br /&gt;
As PEAR has fallen out of favour, the site has been updated to reflect that all these requirements should be installed through either downloading PHAR files or installing them globally with Composer.&lt;/p&gt;

&lt;h2 id=&#34;toc_2&#34;&gt;The problems with this approach&lt;/h2&gt;

&lt;p&gt;While this generally works well, installing the tools at the server/virtual machine level has a couple of downsides. First of all is that you have to keep each server up to date.&lt;br /&gt;
While that isn&amp;rsquo;t very hard, it just doesn&amp;rsquo;t scale. If you need multiple servers to handle different versions of PHP or distributed builds, you need to keep each server up to date and in sync with each other. Additionally with the rise of containers such as &lt;a href=&#34;http://www.docker.com/&#34; title=&#34;Docker - Build, Ship, and Run Any App, Anywhere&#34;&gt;Docker&lt;/a&gt; you have the option of spinning up a container for each application, but you would have to ensure these tools are installed on those containers.&lt;/p&gt;

&lt;p&gt;Another potential issue is that when a developer wants to run a test locally to see if something is fixed that same tool and configuration would need to be present on their development machine.&lt;/p&gt;

&lt;h2 id=&#34;toc_3&#34;&gt;My solution&lt;/h2&gt;

&lt;p&gt;The &lt;a href=&#34;http://github.com/evolution7/qa-tools&#34; title=&#34;Evolution 7 - QA Tools&#34;&gt;evolution7/qa-tools&lt;/a&gt; is a single bundle you can add to the require-dev section of your &lt;code&gt;composer.json&lt;/code&gt; file. It can simply be installed with a &lt;code&gt;composer require --dev &amp;quot;evolution7/qa-tools=1.*&amp;quot;&lt;/code&gt; command and will contain the tools mentioned on the Jenkins PHP site.&lt;/p&gt;

&lt;p&gt;Putting a single library in your require-dev means that you will have access to these tools on your development and CI machines, but don&amp;rsquo;t need to deploy them to your production server.&lt;br /&gt;
Additionally, the library contains sample CI configuration. At the moment this is only for Jenkins, but the advantage of the Jenkins &lt;a href=&#34;http://ant.apache.org&#34;&gt;ant&lt;/a&gt; controlled &lt;code&gt;build.xml&lt;/code&gt; files is that you can run the commands in there easily from the command line as well.&lt;/p&gt;

&lt;h1 id=&#34;toc_4&#34;&gt;Git Hooks&lt;/h1&gt;

&lt;p&gt;The other tool offered by the &lt;a href=&#34;http://github.com/evolution7/qa-tools&#34; title=&#34;Evolution 7 - QA Tools&#34;&gt;evolution7/qa-tools&lt;/a&gt; is a number of Git Hooks. The two main issues with git hooks are generally that you need to combine everything in a single hook, and that it&amp;rsquo;s not easy to share these hooks among your team.
Both of these issues are solved with the great &lt;a href=&#34;https://github.com/icefox/git-hooks&#34;&gt;git-hooks library&lt;/a&gt;, which I would recommend anyone to install and use. Using this tool you can use the hooks provided in our library to prevent most common mistakes among your project.&lt;/p&gt;

&lt;p&gt;In order to use the hooks, you will need to have the git-hooks tool installed, but once you have you can create a &lt;code&gt;git_hooks&lt;/code&gt; directory in the root of your project, put your hooks there, and share them with the rest of your team.&lt;br /&gt;
And of course, if you want it really easy, just create a symlink to the hooks that come with the qa-tools bundle.&lt;/p&gt;

&lt;h1 id=&#34;toc_5&#34;&gt;What will the future bring?&lt;/h1&gt;

&lt;p&gt;This release is version 1.0 of the library, and at the moment it is limited to the most common tools we use across our projects. This means that we expect to add more tools, as well as more configuration examples (including for other CI tools) and git hooks.&lt;/p&gt;

&lt;p&gt;As we love to see quality improve in all code, please use the &lt;a href=&#34;http://github.com/evolution7/qa-tools&#34; title=&#34;Evolution 7 - QA Tools&#34;&gt;evolution7/qa-tools&lt;/a&gt; as much as you see fit. Fork it so you can customize it to your needs or create pull requests to have your favorite tools included.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>